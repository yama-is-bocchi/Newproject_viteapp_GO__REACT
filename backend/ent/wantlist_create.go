// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Ebook/ent/user"
	"Ebook/ent/wantlist"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WantlistCreate is the builder for creating a Wantlist entity.
type WantlistCreate struct {
	config
	mutation *WantlistMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (wc *WantlistCreate) SetTitle(s string) *WantlistCreate {
	wc.mutation.SetTitle(s)
	return wc
}

// SetUserID sets the "user_id" field.
func (wc *WantlistCreate) SetUserID(i int) *WantlistCreate {
	wc.mutation.SetUserID(i)
	return wc
}

// SetUser sets the "user" edge to the User entity.
func (wc *WantlistCreate) SetUser(u *User) *WantlistCreate {
	return wc.SetUserID(u.ID)
}

// Mutation returns the WantlistMutation object of the builder.
func (wc *WantlistCreate) Mutation() *WantlistMutation {
	return wc.mutation
}

// Save creates the Wantlist in the database.
func (wc *WantlistCreate) Save(ctx context.Context) (*Wantlist, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WantlistCreate) SaveX(ctx context.Context) *Wantlist {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WantlistCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WantlistCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WantlistCreate) check() error {
	if _, ok := wc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Wantlist.title"`)}
	}
	if v, ok := wc.mutation.Title(); ok {
		if err := wantlist.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Wantlist.title": %w`, err)}
		}
	}
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Wantlist.user_id"`)}
	}
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Wantlist.user"`)}
	}
	return nil
}

func (wc *WantlistCreate) sqlSave(ctx context.Context) (*Wantlist, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WantlistCreate) createSpec() (*Wantlist, *sqlgraph.CreateSpec) {
	var (
		_node = &Wantlist{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(wantlist.Table, sqlgraph.NewFieldSpec(wantlist.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Title(); ok {
		_spec.SetField(wantlist.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := wc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wantlist.UserTable,
			Columns: []string{wantlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WantlistCreateBulk is the builder for creating many Wantlist entities in bulk.
type WantlistCreateBulk struct {
	config
	err      error
	builders []*WantlistCreate
}

// Save creates the Wantlist entities in the database.
func (wcb *WantlistCreateBulk) Save(ctx context.Context) ([]*Wantlist, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Wantlist, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WantlistMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WantlistCreateBulk) SaveX(ctx context.Context) []*Wantlist {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WantlistCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WantlistCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
