// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Ebook/ent/book"
	"Ebook/ent/lock"
	"Ebook/ent/miss"
	"Ebook/ent/schema"
	"Ebook/ent/token"
	"Ebook/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescTitle is the schema descriptor for title field.
	bookDescTitle := bookFields[0].Descriptor()
	// book.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	book.TitleValidator = bookDescTitle.Validators[0].(func(string) error)
	// bookDescKind is the schema descriptor for kind field.
	bookDescKind := bookFields[2].Descriptor()
	// book.KindValidator is a validator for the "kind" field. It is called by the builders before save.
	book.KindValidator = bookDescKind.Validators[0].(func(string) error)
	// bookDescPrice is the schema descriptor for price field.
	bookDescPrice := bookFields[3].Descriptor()
	// book.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	book.PriceValidator = bookDescPrice.Validators[0].(func(int) error)
	lockFields := schema.Lock{}.Fields()
	_ = lockFields
	// lockDescDate is the schema descriptor for date field.
	lockDescDate := lockFields[1].Descriptor()
	// lock.DefaultDate holds the default value on creation for the date field.
	lock.DefaultDate = lockDescDate.Default.(func() time.Time)
	missFields := schema.Miss{}.Fields()
	_ = missFields
	// missDescCount is the schema descriptor for count field.
	missDescCount := missFields[1].Descriptor()
	// miss.CountValidator is a validator for the "count" field. It is called by the builders before save.
	miss.CountValidator = missDescCount.Validators[0].(func(int) error)
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescToken is the schema descriptor for token field.
	tokenDescToken := tokenFields[1].Descriptor()
	// token.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	token.TokenValidator = tokenDescToken.Validators[0].(func(string) error)
	// tokenDescAccessDate is the schema descriptor for access_date field.
	tokenDescAccessDate := tokenFields[2].Descriptor()
	// token.DefaultAccessDate holds the default value on creation for the access_date field.
	token.DefaultAccessDate = tokenDescAccessDate.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
}
